{
  "name": "LoggingApp",
  "tagline": "Web API application for logging and exception handling",
  "body": "# ### Introduction\r\nThe objectives of this Web API application to create a easy configurable and reusable application for logging and exception handling in the database or csv file or both according to your business needs.  \r\n\r\n### Environment  \r\n* .Net Framework : 4.5  \r\n* Web API Version : 4.0.30506.0  \r\n* MVC Version : 4.0.30506.0  \r\n* Database Used : SQL Server 2012\r\n\r\n### Configuring LoggingApp\r\n**Step 1:**  \r\n  Download and unzip the project files.  \r\n\r\n**Step 2:**  \r\n  change `MsgLoggingFIlePath` and `dbLogConnection` values to your desired file logging path and database connection string.\r\n  \r\n**Step 3:**  \r\n  Run the script file `DBScript.sql` to your database for `[dbo].[tblExceptionLog]` and  `[dbo].[tblMessageLog]` table creation. \r\n \r\n**Step 4:**  \r\n  Host `LoggingApp` to the IIS server and note down the hosting url.  \r\n\r\n**Step 5:**  \r\n  Copy and Paste `LoggingProcessor.cs` file from ClientApp folder to your project folder for which you need logging message and exception. Change the namespace `ClientApp` accordingly.  \r\n\r\n**Step 6:**  \r\n  Copy and paste `Constant.cs` file to your project folder and change the namespace `ClientApp` accordingly.  \r\n\r\n**Step 7:**  \r\n * Add the following appSettings lines to your projects app setting folder. Change `http://localhost:18235/` part of `MessageLoggingApiUrl` and `ExceptionLoggingApiUrl` value to your LoggingApp hosting url.  \r\n * LoggingTypeValue value can be either of DB/File/All for logging in database or csv file or both place  \r\n    `<add key=\"MessageLoggingApiUrl\" value=\"http://localhost:18235/api/LogData/LoggingData\"/>\r\n    <add key=\"ExceptionLoggingApiUrl\" value=\"http://localhost:18235/api/LogData/LoggingExceptionData\"/>\r\n    <add key=\"loggingTypeValue\" value=\"All\"/>`   \r\n \r\n**Step 8:**  \r\n  * In the `HomeController.cs` the sample code is provided for logging message and exception through `LoggingExceptionProcessor` and `LoggingMessageProcessor` attribute.  \r\n  * `RequestLogging` and `RequestExceptionLogging` method can also be called for logging message and exception from required places creating instance `LoggingMessageProcessorAttribute` and `LoggingExceptionProcessorAttribute` class respectively.  \r\n\r\n### Authors and Contributors\r\nFind my profile in GitHub Subhajit Ray, (@subhajit69)\r\n\r\n### Support or Contact\r\nHaving trouble with configuration? Drop a mail to subhajit.ray69@gmail.com",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}